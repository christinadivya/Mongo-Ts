# swagger/swagger.yaml
openapi: 3.0.1
info:
  title: typescript-auth
  description: ""
  version: 1.0.0
tags:
  - name: User
    description: Operations about User
  - name: Auth
    description: Operations about Auth
servers:
  - url: http://localhost:3000/api
paths:
  /users:
    get:
      summary: Get all users
      tags:
        - User
      parameters:
        - name: searchTerm
          in: query
          required: true
          description: search the users by name, email and domain
          schema:
           type: string
      security:
        - Authorization: []  # <-- Specify that the endpoint requires authorization
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                    age: 
                      type: number
                    domain:
                      type: number
                    experience:
                      type: number
                    email:
                      type: string
    post:
      summary: Create a new user
      tags:
        - User
      parameters:
        - $ref: "#/components/parameters/app_language"
        - $ref: "#/components/parameters/app_version"
      requestBody:
        description: Create User Request body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
            examples:
              create-user:
                $ref: "#/components/examples/CreateUser"
        required: true
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input
      x-codegen-request-body-name: body
  /auth/login:
    post:
      summary: Login new user
      tags:
        - Auth
      parameters:
        - $ref: "#/components/parameters/app_language"
        - $ref: "#/components/parameters/app_version"
      requestBody:
        description: Create User Request body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
            examples:
              login-user:
                $ref: "#/components/examples/LoginUser"
        required: true
      responses:
        '201':
          description: Login successfully
        '400':
          description: Invalid input
      x-codegen-request-body-name: body
  /users/view-detail:
    get:
      summary: Get user by id
      tags:
        - User
      security:
        - Authorization: []  # <-- Specify that the endpoint requires authorization
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                    age: 
                      type: number
                    domain:
                      type: number
                    experience:
                      type: number
                    email:
                      type: string
components:
  parameters:
    app_language:
      in: header
      name: app-language
      required: true
      description: app language
      schema:
        type: string
        example: en
    app_version:
      in: header
      name: app_version
      required: true
      description: app version
      schema:
        type: number
        example: "1"
    sortBy:
      name: "sortBy"
      in: "query"
      description: "Select the sort order (Ex:DESC)"
      schema:
        type: "string"
        enum: [DESC, ASC]
        example: DESC
    sortField:
      name: "sortField"
      in: "query"
      description: "enter the sort order (Ex:created_at)"
      schema:
        type: "string"
        example: created_at
    page:
      name: page
      in: "query"
      description: "Mention the page number (Ex:10)"
      required: true
      schema:
        type: number
        example: 1
    limit:
      name: limit
      in: "query"
      description: "Mention the limit should display per page (Ex:10)"
      required: true
      schema:
        type: number
        example: 10
  securitySchemes:
    Authorization:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    Error:
      type: object
      required:
        - statusCode
        - message
      properties:
        statusCode:
          type: number
        message:
          type: string
    ValidationError:
      required:
        - message
      properties:
        message:
          type: object
          required:
            - name
            - message
            - statusCode
            - error
            - details
          properties:
            name:
              type: string
              description: ValidationError
            message:
              type: string
              description: Validation Failed
            statusCode:
              type: number
              description: This will be 422 for this type of error
            error:
              type: string
              description: Bad Request
            details:
              type: array
              items:
                type: string
                description: Validation failed fields will return
        stack:
          type: string
          description: Error stack will return
    CreateUser:
      allOf:
        - type: object
          properties:
            name:
              type: string
              description: Name of the user.Length of this field can be upto 150 characters.
            age:
              type: number
              description: Age of the user.
            domain:
              type: string
              description: Domain of the user.
            experience:
              type: number
              description: Experience of the user in months.
            password:
              type: string
              description: The User can create their password which should be in encrypted form.
            email:
              type: string
              description: It should be valid email address.
    LoginUser:
      allOf:
        - type: object
          properties:
            password:
              type: string
              description: The User can enter their password which should be in encrypted form.
            email:
              type: string
              description: It should be valid email address.
  examples:
    CreateUser:
      value:
        name: Divya
        age: 32
        domain: JS
        experience: 34
        password: Password1!
        email: divya@yopmail.com
    LoginUser:
      value:
        email: divya@yopmail.com
        password: Password1!

